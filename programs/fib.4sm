$loop_index   0000
$x            0001
$y            0002
$output_start 0003
$output_end   0010

init:
    ; declare memcache addresses as first 16 bytes of ram
    mca 0 $loop_index ; holds the loop index
    mca 1 $x ; stores fib[n-1]
    mca 2 $y ; stores fib[n-2]

    mca 3 $output_start ; output of the program starts here
    mca 4 $output_start+1
    mca 5 $output_start+2
    mca 6 $output_start+3
    mca 7 $output_start+4
    mca 8 $output_start+5
    mca 9 $output_start+6
    mca A $output_start+7
    mca B $output_start+8
    mca C $output_start+9
    mca D $output_start+A
    mca E $output_start+B
    mca F $output_start+C

    ; first 2 numbers in the sequence are 1 and 1
    ulia 1

    lib 1 ; store 1 @ cache address 2
    st
    lib 2 ; store 1 @ cache address 3
    st

    swp ; loop index is the memory cache address last used (3 in this case)
    lib 0
    st

    ; now ram looks like [2, 1, 1, ...]
    ; a=2, b=0

loop:
    ; first get args from ram
    ldb 1
    swp
    ldb 2

    fnc calc_next  ; calculate the next fib number
    fnc inc_index  ; increment the loop index
    fnc store_next ; store previously calculated fib number in the incremented index position
    
    ulda 0   ; load the index again
    uaddi 1  ; check if we are overflowing
    jcu loop ; if not, repeat the loop

    clc      ; overflowing = program done running
    jcu exit ; jump over the functions to get to exit

calc_next:
    add   ; calculate next fib # in $a
    uclc  ; need to clear the carry manually
    ldb 1 ; save fib [n-1], going to move it to ram[2]
    sta 1 ; store sum in ram[1]
    swp   ; store fib[n-1] in ram[2] (as advertised)
    sta 2
    ret

inc_index:
    ulda 0  ; get index
    uaddi 1 ; increment it
    sta 0   ; store the incremented version
    ret

store_next:
    ulda 1 ; get the most recent sum (and swap index to b)
    st
    ret

exit:
    mca F $output_end ; mark a result in ram to show we got here successfully
    ulia F
    lib F
    st